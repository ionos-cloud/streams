// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mock

import (
	streams "github.com/ionos-cloud/streams"
	msg "github.com/ionos-cloud/streams/msg"
	"sync"
)

// MockSink is a mock implementation of the Sink interface (from the package
// github.com/ionos-cloud/streams) used for unit testing.
type MockSink[K interface{}, V interface{}] struct {
	// WriteFunc is an instance of a mock function object controlling the
	// behavior of the method Write.
	WriteFunc *SinkWriteFunc[K, V]
}

// NewMockSink creates a new mock of the Sink interface. All methods return
// zero values for all results, unless overwritten.
func NewMockSink[K interface{}, V interface{}]() *MockSink[K, V] {
	return &MockSink[K, V]{
		WriteFunc: &SinkWriteFunc[K, V]{
			defaultHook: func(...msg.Message[K, V]) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockSink creates a new mock of the Sink interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockSink[K interface{}, V interface{}]() *MockSink[K, V] {
	return &MockSink[K, V]{
		WriteFunc: &SinkWriteFunc[K, V]{
			defaultHook: func(...msg.Message[K, V]) error {
				panic("unexpected invocation of MockSink.Write")
			},
		},
	}
}

// NewMockSinkFrom creates a new mock of the MockSink interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockSinkFrom[K interface{}, V interface{}](i streams.Sink[K, V]) *MockSink[K, V] {
	return &MockSink[K, V]{
		WriteFunc: &SinkWriteFunc[K, V]{
			defaultHook: i.Write,
		},
	}
}

// SinkWriteFunc describes the behavior when the Write method of the parent
// MockSink instance is invoked.
type SinkWriteFunc[K interface{}, V interface{}] struct {
	defaultHook func(...msg.Message[K, V]) error
	hooks       []func(...msg.Message[K, V]) error
	history     []SinkWriteFuncCall[K, V]
	mutex       sync.Mutex
}

// Write delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSink[K, V]) Write(v0 ...msg.Message[K, V]) error {
	r0 := m.WriteFunc.nextHook()(v0...)
	m.WriteFunc.appendCall(SinkWriteFuncCall[K, V]{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Write method of the
// parent MockSink instance is invoked and the hook queue is empty.
func (f *SinkWriteFunc[K, V]) SetDefaultHook(hook func(...msg.Message[K, V]) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Write method of the parent MockSink instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *SinkWriteFunc[K, V]) PushHook(hook func(...msg.Message[K, V]) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SinkWriteFunc[K, V]) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(...msg.Message[K, V]) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SinkWriteFunc[K, V]) PushReturn(r0 error) {
	f.PushHook(func(...msg.Message[K, V]) error {
		return r0
	})
}

func (f *SinkWriteFunc[K, V]) nextHook() func(...msg.Message[K, V]) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SinkWriteFunc[K, V]) appendCall(r0 SinkWriteFuncCall[K, V]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SinkWriteFuncCall objects describing the
// invocations of this function.
func (f *SinkWriteFunc[K, V]) History() []SinkWriteFuncCall[K, V] {
	f.mutex.Lock()
	history := make([]SinkWriteFuncCall[K, V], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SinkWriteFuncCall is an object that describes an invocation of method
// Write on an instance of MockSink.
type SinkWriteFuncCall[K interface{}, V interface{}] struct {
	// Arg0 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg0 []msg.Message[K, V]
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c SinkWriteFuncCall[K, V]) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg0 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SinkWriteFuncCall[K, V]) Results() []interface{} {
	return []interface{}{c.Result0}
}
