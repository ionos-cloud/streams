// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mock

import (
	streams "github.com/ionos-cloud/streams"
	msg "github.com/ionos-cloud/streams/msg"
	"sync"
)

// MockTable is a mock implementation of the Table interface (from the
// package github.com/ionos-cloud/streams) used for unit testing.
type MockTable struct {
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *TableDeleteFunc
	// ErrorFunc is an instance of a mock function object controlling the
	// behavior of the method Error.
	ErrorFunc *TableErrorFunc
	// NextFunc is an instance of a mock function object controlling the
	// behavior of the method Next.
	NextFunc *TableNextFunc
	// SetFunc is an instance of a mock function object controlling the
	// behavior of the method Set.
	SetFunc *TableSetFunc
	// SetupFunc is an instance of a mock function object controlling the
	// behavior of the method Setup.
	SetupFunc *TableSetupFunc
	// WriteFunc is an instance of a mock function object controlling the
	// behavior of the method Write.
	WriteFunc *TableWriteFunc
}

// NewMockTable creates a new mock of the Table interface. All methods
// return zero values for all results, unless overwritten.
func NewMockTable() *MockTable {
	return &MockTable{
		DeleteFunc: &TableDeleteFunc{
			defaultHook: func(string) (r0 error) {
				return
			},
		},
		ErrorFunc: &TableErrorFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		NextFunc: &TableNextFunc{
			defaultHook: func() (r0 <-chan streams.NextCursor) {
				return
			},
		},
		SetFunc: &TableSetFunc{
			defaultHook: func(string, []byte) (r0 error) {
				return
			},
		},
		SetupFunc: &TableSetupFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		WriteFunc: &TableWriteFunc{
			defaultHook: func(...msg.Message[string, []byte]) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockTable creates a new mock of the Table interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockTable() *MockTable {
	return &MockTable{
		DeleteFunc: &TableDeleteFunc{
			defaultHook: func(string) error {
				panic("unexpected invocation of MockTable.Delete")
			},
		},
		ErrorFunc: &TableErrorFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockTable.Error")
			},
		},
		NextFunc: &TableNextFunc{
			defaultHook: func() <-chan streams.NextCursor {
				panic("unexpected invocation of MockTable.Next")
			},
		},
		SetFunc: &TableSetFunc{
			defaultHook: func(string, []byte) error {
				panic("unexpected invocation of MockTable.Set")
			},
		},
		SetupFunc: &TableSetupFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockTable.Setup")
			},
		},
		WriteFunc: &TableWriteFunc{
			defaultHook: func(...msg.Message[string, []byte]) error {
				panic("unexpected invocation of MockTable.Write")
			},
		},
	}
}

// NewMockTableFrom creates a new mock of the MockTable interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockTableFrom(i streams.Table) *MockTable {
	return &MockTable{
		DeleteFunc: &TableDeleteFunc{
			defaultHook: i.Delete,
		},
		ErrorFunc: &TableErrorFunc{
			defaultHook: i.Error,
		},
		NextFunc: &TableNextFunc{
			defaultHook: i.Next,
		},
		SetFunc: &TableSetFunc{
			defaultHook: i.Set,
		},
		SetupFunc: &TableSetupFunc{
			defaultHook: i.Setup,
		},
		WriteFunc: &TableWriteFunc{
			defaultHook: i.Write,
		},
	}
}

// TableDeleteFunc describes the behavior when the Delete method of the
// parent MockTable instance is invoked.
type TableDeleteFunc struct {
	defaultHook func(string) error
	hooks       []func(string) error
	history     []TableDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTable) Delete(v0 string) error {
	r0 := m.DeleteFunc.nextHook()(v0)
	m.DeleteFunc.appendCall(TableDeleteFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockTable instance is invoked and the hook queue is empty.
func (f *TableDeleteFunc) SetDefaultHook(hook func(string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockTable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TableDeleteFunc) PushHook(hook func(string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TableDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TableDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(string) error {
		return r0
	})
}

func (f *TableDeleteFunc) nextHook() func(string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TableDeleteFunc) appendCall(r0 TableDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TableDeleteFuncCall objects describing the
// invocations of this function.
func (f *TableDeleteFunc) History() []TableDeleteFuncCall {
	f.mutex.Lock()
	history := make([]TableDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TableDeleteFuncCall is an object that describes an invocation of method
// Delete on an instance of MockTable.
type TableDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TableDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TableDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TableErrorFunc describes the behavior when the Error method of the parent
// MockTable instance is invoked.
type TableErrorFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []TableErrorFuncCall
	mutex       sync.Mutex
}

// Error delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTable) Error() error {
	r0 := m.ErrorFunc.nextHook()()
	m.ErrorFunc.appendCall(TableErrorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Error method of the
// parent MockTable instance is invoked and the hook queue is empty.
func (f *TableErrorFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Error method of the parent MockTable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TableErrorFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TableErrorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TableErrorFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *TableErrorFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TableErrorFunc) appendCall(r0 TableErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TableErrorFuncCall objects describing the
// invocations of this function.
func (f *TableErrorFunc) History() []TableErrorFuncCall {
	f.mutex.Lock()
	history := make([]TableErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TableErrorFuncCall is an object that describes an invocation of method
// Error on an instance of MockTable.
type TableErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TableErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TableErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TableNextFunc describes the behavior when the Next method of the parent
// MockTable instance is invoked.
type TableNextFunc struct {
	defaultHook func() <-chan streams.NextCursor
	hooks       []func() <-chan streams.NextCursor
	history     []TableNextFuncCall
	mutex       sync.Mutex
}

// Next delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTable) Next() <-chan streams.NextCursor {
	r0 := m.NextFunc.nextHook()()
	m.NextFunc.appendCall(TableNextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Next method of the
// parent MockTable instance is invoked and the hook queue is empty.
func (f *TableNextFunc) SetDefaultHook(hook func() <-chan streams.NextCursor) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Next method of the parent MockTable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TableNextFunc) PushHook(hook func() <-chan streams.NextCursor) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TableNextFunc) SetDefaultReturn(r0 <-chan streams.NextCursor) {
	f.SetDefaultHook(func() <-chan streams.NextCursor {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TableNextFunc) PushReturn(r0 <-chan streams.NextCursor) {
	f.PushHook(func() <-chan streams.NextCursor {
		return r0
	})
}

func (f *TableNextFunc) nextHook() func() <-chan streams.NextCursor {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TableNextFunc) appendCall(r0 TableNextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TableNextFuncCall objects describing the
// invocations of this function.
func (f *TableNextFunc) History() []TableNextFuncCall {
	f.mutex.Lock()
	history := make([]TableNextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TableNextFuncCall is an object that describes an invocation of method
// Next on an instance of MockTable.
type TableNextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 <-chan streams.NextCursor
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TableNextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TableNextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TableSetFunc describes the behavior when the Set method of the parent
// MockTable instance is invoked.
type TableSetFunc struct {
	defaultHook func(string, []byte) error
	hooks       []func(string, []byte) error
	history     []TableSetFuncCall
	mutex       sync.Mutex
}

// Set delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTable) Set(v0 string, v1 []byte) error {
	r0 := m.SetFunc.nextHook()(v0, v1)
	m.SetFunc.appendCall(TableSetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Set method of the
// parent MockTable instance is invoked and the hook queue is empty.
func (f *TableSetFunc) SetDefaultHook(hook func(string, []byte) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Set method of the parent MockTable instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *TableSetFunc) PushHook(hook func(string, []byte) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TableSetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, []byte) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TableSetFunc) PushReturn(r0 error) {
	f.PushHook(func(string, []byte) error {
		return r0
	})
}

func (f *TableSetFunc) nextHook() func(string, []byte) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TableSetFunc) appendCall(r0 TableSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TableSetFuncCall objects describing the
// invocations of this function.
func (f *TableSetFunc) History() []TableSetFuncCall {
	f.mutex.Lock()
	history := make([]TableSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TableSetFuncCall is an object that describes an invocation of method Set
// on an instance of MockTable.
type TableSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TableSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TableSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TableSetupFunc describes the behavior when the Setup method of the parent
// MockTable instance is invoked.
type TableSetupFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []TableSetupFuncCall
	mutex       sync.Mutex
}

// Setup delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTable) Setup() error {
	r0 := m.SetupFunc.nextHook()()
	m.SetupFunc.appendCall(TableSetupFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Setup method of the
// parent MockTable instance is invoked and the hook queue is empty.
func (f *TableSetupFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Setup method of the parent MockTable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TableSetupFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TableSetupFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TableSetupFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *TableSetupFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TableSetupFunc) appendCall(r0 TableSetupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TableSetupFuncCall objects describing the
// invocations of this function.
func (f *TableSetupFunc) History() []TableSetupFuncCall {
	f.mutex.Lock()
	history := make([]TableSetupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TableSetupFuncCall is an object that describes an invocation of method
// Setup on an instance of MockTable.
type TableSetupFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TableSetupFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TableSetupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TableWriteFunc describes the behavior when the Write method of the parent
// MockTable instance is invoked.
type TableWriteFunc struct {
	defaultHook func(...msg.Message[string, []byte]) error
	hooks       []func(...msg.Message[string, []byte]) error
	history     []TableWriteFuncCall
	mutex       sync.Mutex
}

// Write delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTable) Write(v0 ...msg.Message[string, []byte]) error {
	r0 := m.WriteFunc.nextHook()(v0...)
	m.WriteFunc.appendCall(TableWriteFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Write method of the
// parent MockTable instance is invoked and the hook queue is empty.
func (f *TableWriteFunc) SetDefaultHook(hook func(...msg.Message[string, []byte]) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Write method of the parent MockTable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TableWriteFunc) PushHook(hook func(...msg.Message[string, []byte]) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TableWriteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(...msg.Message[string, []byte]) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TableWriteFunc) PushReturn(r0 error) {
	f.PushHook(func(...msg.Message[string, []byte]) error {
		return r0
	})
}

func (f *TableWriteFunc) nextHook() func(...msg.Message[string, []byte]) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TableWriteFunc) appendCall(r0 TableWriteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TableWriteFuncCall objects describing the
// invocations of this function.
func (f *TableWriteFunc) History() []TableWriteFuncCall {
	f.mutex.Lock()
	history := make([]TableWriteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TableWriteFuncCall is an object that describes an invocation of method
// Write on an instance of MockTable.
type TableWriteFuncCall struct {
	// Arg0 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg0 []msg.Message[string, []byte]
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c TableWriteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg0 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TableWriteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
